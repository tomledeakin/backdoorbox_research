/home/s222576762/BackdoorBox Research/backdoor-toolbox/utils/tools.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.img_set = torch.load(data_dir)
/home/s222576762/BackdoorBox Research/backdoor-toolbox/utils/tools.py:29: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.gt = torch.load(label_path)
Traceback (most recent call last):
  File "/home/s222576762/BackdoorBox Research/backdoor-toolbox/train_on_poisoned_set.py", line 236, in <module>
    poison_transform = supervisor.get_poison_transform(poison_type=args.poison_type, dataset_name=args.dataset,
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/s222576762/BackdoorBox Research/backdoor-toolbox/utils/supervisor.py", line 509, in get_poison_transform
    poison_transform = adaptive_patch.poison_transform(img_size=img_size, test_trigger_names=
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/s222576762/BackdoorBox Research/backdoor-toolbox/poison_tool_box/adaptive_patch.py", line 269, in __init__
    self.trigger_marks.append(trigger.cuda())
                              ^^^^^^^^^^^^^^
RuntimeError: CUDA error: uncorrectable ECC error encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/home/s222576762/BackdoorBox Research/backdoor-toolbox/test_model.py:112: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(model_path))
/home/s222576762/BackdoorBox Research/backdoor-toolbox/utils/tools.py:29: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.gt = torch.load(label_path)
  0%|          | 0/63 [00:00<?, ?it/s]  2%|▏         | 1/63 [00:02<02:11,  2.12s/it]  8%|▊         | 5/63 [00:02<00:19,  2.94it/s] 14%|█▍        | 9/63 [00:02<00:09,  5.91it/s] 19%|█▉        | 12/63 [00:02<00:07,  6.96it/s] 24%|██▍       | 15/63 [00:02<00:05,  8.71it/s] 27%|██▋       | 17/63 [00:02<00:04,  9.45it/s] 30%|███       | 19/63 [00:03<00:04,  9.50it/s] 35%|███▍      | 22/63 [00:03<00:04, 10.20it/s] 41%|████▏     | 26/63 [00:03<00:03, 12.23it/s] 46%|████▌     | 29/63 [00:03<00:02, 13.66it/s] 51%|█████     | 32/63 [00:03<00:01, 16.27it/s] 54%|█████▍    | 34/63 [00:04<00:01, 15.29it/s] 57%|█████▋    | 36/63 [00:04<00:02, 12.15it/s] 63%|██████▎   | 40/63 [00:04<00:02, 11.35it/s] 70%|██████▉   | 44/63 [00:05<00:01, 12.52it/s] 76%|███████▌  | 48/63 [00:05<00:01, 12.71it/s] 83%|████████▎ | 52/63 [00:05<00:00, 13.27it/s] 89%|████████▉ | 56/63 [00:05<00:00, 12.76it/s] 95%|█████████▌| 60/63 [00:06<00:00, 14.00it/s]100%|██████████| 63/63 [00:06<00:00, 15.70it/s]100%|██████████| 63/63 [00:06<00:00, 10.00it/s]
/home/s222576762/BackdoorBox Research/backdoor-toolbox/utils/tools.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.img_set = torch.load(data_dir)
/home/s222576762/BackdoorBox Research/backdoor-toolbox/utils/tools.py:29: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.gt = torch.load(label_path)
/home/s222576762/BackdoorBox Research/backdoor-toolbox/umap_visualize.py:158: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  poison_indices = torch.tensor(torch.load(poison_indices_path))
Traceback (most recent call last):
  File "/home/s222576762/BackdoorBox Research/backdoor-toolbox/umap_visualize.py", line 186, in <module>
    poison_transform = supervisor.get_poison_transform(poison_type=args.poison_type, dataset_name=args.dataset,
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/s222576762/BackdoorBox Research/backdoor-toolbox/utils/supervisor.py", line 509, in get_poison_transform
    poison_transform = adaptive_patch.poison_transform(img_size=img_size, test_trigger_names=
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/s222576762/BackdoorBox Research/backdoor-toolbox/poison_tool_box/adaptive_patch.py", line 269, in __init__
    self.trigger_marks.append(trigger.cuda())
                              ^^^^^^^^^^^^^^
RuntimeError: CUDA error: uncorrectable ECC error encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

